(function () {
    if (!window.TencentCaptcha) {
        throw Error("can not find TencentCaptcha SDK")
    }

    if (!Function.prototype.bind) {
        Function.prototype.bind = function (oThis) {
            if (typeof this !== "function") {
                // closest thing possible to the ECMAScript 5 internal IsCallable function
                throw new TypeError("Function.prototype.bind - what is trying to be bound is not callable");
            }

            var aArgs = Array.prototype.slice.call(arguments, 1),
                fToBind = this,
                fNOP = function () {
                },
                fBound = function () {
                    return fToBind.apply(this instanceof fNOP
                        ? this
                        : oThis,
                        aArgs.concat(Array.prototype.slice.call(arguments)));
                };

            fNOP.prototype = this.prototype;
            fBound.prototype = new fNOP();

            return fBound;
        };
    }

    function getMd5Value(timeStamp, uuid, token) {
        var host = location.host;
        if (
            host.indexOf("huiju.cool") >= 0 ||
            host.indexOf("convertlab.com") >= 0 ||
            host.indexOf("dmhub.cn") >= 0 ||
            host.indexOf("convertwork.cn") >= 0
        ) {
            return timeStamp + md5(timeStamp + uuid.toString().substr(0, 16));
        } else {
            return token;
        }
    }

    var AGENT = (function () {
        function getHttpRequest(headers) {
            var http;
            if (window.XMLHttpRequest) {
                http = new XMLHttpRequest();
            } else {
                // code for IE6, IE5
                http = new ActiveXObject("Microsoft.XMLHTTP");
            }
            var result,
                pendingActions = [],
                errorActions = [],
                isReady = false;

            var readyFunction = function (data, actions, status) {
                isReady = true;
                try {
                    data = JSON.parse(data);
                } catch (e) {
                    // do nothing;
                }
                result = data;

                if (actions.length > 0) {
                    actions.forEach(function (action) {
                        action(result, status);
                    });
                }
            };

            var prepareListener = function (type, url, args) {
                http.onreadystatechange = function () {
                    if (http.readyState == 4) {
                        if (http.status == 200) {
                            readyFunction(http.responseText, pendingActions, http.status);
                        } else {
                            readyFunction(http.responseText, errorActions, http.status);
                        }
                    }
                };
                args = args || {};
                var async = args.async === undefined ? true : args.async;
                http.open(type, url, async);
                if (headers) {
                    headers.forEach(function (header) {
                        for (var key in header) {
                            http.setRequestHeader(key, header[key]);
                        }
                    });
                }
            };

            http.get = function (url, args) {
                prepareListener("GET", url, args);
                http.send();
                return http;
            };

            http.post = function (url, data, args) {
                prepareListener("POST", url, args);
                http.send(data);
                return http;
            };

            var actionHandler = function (action, actionArray) {
                if (typeof action == "function") {
                    if (isReady) {
                        action(result);
                    } else {
                        actionArray.push(action);
                    }
                }
            };

            http.then = function (readyAction) {
                actionHandler(readyAction, pendingActions);
                return http;
            };

            http.fail = function (errorAction) {
                actionHandler(errorAction, errorActions);
                return http;
            };

            return http;
        }

        function getQueryParamsMap(url, params) {
            var formParams = url.split("?")[1];
            if (formParams) {
                formParams = formParams.split("&");
                formParams.map(function (p) {
                    if (!p) return;
                    var kv = p.split("=");
                    if (kv[1]) {
                        params[kv[0]] = kv[1];
                    }
                });
            }
        }

        function getParam(name) {
            var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)");
            var r = window.location.search.substr(1).match(reg);
            if (r) return decodeURI(r[2]);
            return null; //返回参数值
        }

        return {
            getHttpRequest: getHttpRequest,
            getQueryParamsMap: getQueryParamsMap,
            getParam: getParam,
        };
    })();
    var _ = {};
    var ArrayProto = Array.prototype,
        ObjProto = Object.prototype,
        slice = ArrayProto.slice,
        hasOwnProperty = ObjProto.hasOwnProperty;

    var nativeForEach = ArrayProto.forEach,
        breaker = {};
    _.each = function (obj, iterator, context) {
        if (obj == null) {
            return false;
        }
        if (nativeForEach && obj.forEach === nativeForEach) {
            obj.forEach(iterator, context);
        } else if (obj.length === +obj.length) {
            for (var i = 0, l = obj.length; i < l; i++) {
                if (i in obj && iterator.call(context, obj[i], i, obj) === breaker) {
                    return false;
                }
            }
        } else {
            for (var key in obj) {
                if (hasOwnProperty.call(obj, key)) {
                    if (iterator.call(context, obj[key], key, obj) === breaker) {
                        return false;
                    }
                }
            }
        }
    };

    _.extend = function (obj) {
        _.each(slice.call(arguments, 1), function (source) {
            for (var prop in source) {
                if (source[prop] !== void 0) {
                    obj[prop] = source[prop];
                }
            }
        });
        return obj;
    };

    var cl_captcha = function (options) {
        var defaultOptions = {
            hostUrl: "https://host.huiju.cool",
            resouceType: "",//资源类型 form/page
            resourceUuid: "",//资源uuid
            signature: "",//短信签名
            codeElement: "",//验证码dom元素id
            phoneElement: "",//手机号dom元素id
            bizState: null,//自定义透传参数，业务可用该字段传递少量数据，该字段的内容会被带入callback回调的对象中
            enableDarkMode: true,//开启自适应深夜模式
            sdkOpts: null,//示例 {"width": 140, "height": 140} 移动端原生webview调用时传入，为设置的验证码弹框大小。注意：手机原生端页面弹框通过 webview 加载验证码时须设置此值。若使用验证码 Web 的 loading，可设置一个小的值，然后在 ready 回调后重新设置尺寸。若自己实现 loading，此值可随意设置，等待 ready 回调后，再设置实际大小
        };
        this.isHost = true;
        this.init(_.extend(defaultOptions, options));
    };
    cl_captcha.prototype = {
        init: function (options) {//初始化
            this.resourceUuid = options.resourceUuid;
            this.resouceType = options.resouceType;
            this.signature = options.signature;
            this.hostUrl = options.hostUrl;
            this.codeElement = options.codeElement;
            this.phoneElement = options.phoneElement;
            this.isHost = options.isHost;
            if (!this.hostUrl) {
                throw Error("can not get host url")
            }
            var initUrl = this.hostUrl + (this.isHost === true ? "/pagedata/startCaptcha" : "/tencentCaptch/startCaptcha");
            if (options.channel) {
                initUrl += ("?channel=" + options.channel)
            }
            AGENT.getHttpRequest()
                .get(initUrl)
                .then(function (data) {
                    this.captcha = new TencentCaptcha(data.appid, this.callback.bind(this), {
                            enableDarkMode: options.enableDarkMode,
                            sdkOpts: options.sdkOpts
                        }
                    );
                    var btnCode = document.getElementById(this.codeElement);
                    btnCode.onclick = function (ev) {
                        var mobile = document.getElementById(this.phoneElement).value;
                        var internationalSms = AGENT.getParam("internationalSms");
                        if (mobile == null || mobile == "") {
                            alert("手机号不正确");
                            return;
                        }
                        if (!internationalSms) {
                            if (mobile.length < 11) {
                                alert("手机号不正确");
                                return;
                            }
                            if (!/^1\d[0-9]\d{8}$/.test(mobile)) {
                                alert("请输入正确的手机号");
                                return;
                            }
                        }
                        this.captcha.show();
                    }.bind(this);
                }.bind(this))
        },
        callback: function (res) {//验证回调
            if (res.ret === 0) {
                var ticket = res.ticket;
                var randomStr = res.randstr;
                var mobile = document.getElementById(this.phoneElement).value;
                var internationalSms = AGENT.getParam("internationalSms");
                mobile = encodeURIComponent(mobile);
                var uuid = this.resourceUuid;
                var type = this.resouceType;
                var timeStamp = new Date().getTime();
                var tokenUrl = ""
                if (this.isHost) {
                    tokenUrl = this.hostUrl + "/sms/token?mobile=" + mobile
                } else {
                    tokenUrl = this.hostUrl + "/sms/token/" + this.resourceUuid + "?mobile=" + mobile
                }
                AGENT.getHttpRequest()
                    .get(tokenUrl)
                    .then(function (token) {
                        var token = (this.isHost === true ? getMd5Value(timeStamp, uuid, token) : token)
                        var code_url =
                            this.hostUrl +
                            "/sms/get?mobile=" +
                            mobile +
                            "&name=" + encodeURIComponent(this.signature) +
                            "&token=" +
                            token +
                            "&type=" +
                            type +
                            "&uuid=" +
                            uuid;
                        if (internationalSms) {
                            code_url = code_url + "&internationalSms=true";
                        }
                        code_url += "&ticket=" + ticket;
                        code_url += "&rands=" + randomStr;
                        AGENT.getHttpRequest()
                            .get(code_url)
                            .then(function (result) {
                                var error;
                                if (result.msg && result.msg !== "OK") {
                                    error = result.msg;
                                } else if (result.error) {
                                    error = result.error.message;
                                }
                                if (error) {
                                    alert(error);
                                } else {
                                    var btnCode = document.getElementById(this.codeElement);
                                    btnCode.textContent = "60" + "秒后再获取";
                                    btnCode.setAttribute("disabled", "true");
                                    var i = 59;
                                    var intervalid;
                                    intervalid = setInterval(function () {
                                        btnCode.textContent = i + "秒再获取";
                                        if (i == 0) {
                                            btnCode.textContent = "获取验证码";
                                            btnCode.removeAttribute("disabled");
                                            clearInterval(intervalid);
                                        }
                                        i--;
                                    }, 1000);
                                }
                            }.bind(this))
                            .fail(function () {
                                alert("获取验证码失败！");
                            });
                    }.bind(this));
            } else {
                alert("请完成图形验证");
            }
        }
    };
    window.cl_captcha = cl_captcha
})(window);